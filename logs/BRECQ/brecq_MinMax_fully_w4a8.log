
Case: [ resnet18_BRECQ_MinMaxQuantizer_CH_W4A8_RoundingLR0.01 ]
    - arch: resnet18
    - batch_size: 128
    - num_samples: 1024
    - folding: False
    - batch_size_AdaRound: 32
    - lr: 0.01

- weight params:
    - scheme: MinMaxQuantizer
    - dstDtype: INT4
    - per_channel: True
    - BRECQ: True

- activation params:
    - scheme: MinMaxQuantizer
    - dstDtype: INT8
    - per_channel: False

Replace to QuantLayer
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 0 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 1 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 0 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 1 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 0 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 1 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 0 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
- Quant Block 1 making done !
    2D search with INT4
    Parent class is MinMaxQuantizer
    Initiated the V
Qparams computing done!
    QuantLayer: conv1, torch.Size([64, 3, 7, 7])
    QuantLayer: layer1.0.conv_bn_relu_1, torch.Size([64, 64, 3, 3])
    QuantLayer: layer1.0.conv_bn_2, torch.Size([64, 64, 3, 3])
    QuantLayer: layer1.1.conv_bn_relu_1, torch.Size([64, 64, 3, 3])
    QuantLayer: layer1.1.conv_bn_2, torch.Size([64, 64, 3, 3])
    QuantLayer: layer2.0.conv_bn_relu_1, torch.Size([128, 64, 3, 3])
    QuantLayer: layer2.0.conv_bn_2, torch.Size([128, 128, 3, 3])
    QuantLayer: layer2.0.conv_bn_down, torch.Size([128, 64, 1, 1])
    QuantLayer: layer2.1.conv_bn_relu_1, torch.Size([128, 128, 3, 3])
    QuantLayer: layer2.1.conv_bn_2, torch.Size([128, 128, 3, 3])
    QuantLayer: layer3.0.conv_bn_relu_1, torch.Size([256, 128, 3, 3])
    QuantLayer: layer3.0.conv_bn_2, torch.Size([256, 256, 3, 3])
    QuantLayer: layer3.0.conv_bn_down, torch.Size([256, 128, 1, 1])
    QuantLayer: layer3.1.conv_bn_relu_1, torch.Size([256, 256, 3, 3])
    QuantLayer: layer3.1.conv_bn_2, torch.Size([256, 256, 3, 3])
    QuantLayer: layer4.0.conv_bn_relu_1, torch.Size([512, 256, 3, 3])
    QuantLayer: layer4.0.conv_bn_2, torch.Size([512, 512, 3, 3])
    QuantLayer: layer4.0.conv_bn_down, torch.Size([512, 256, 1, 1])
    QuantLayer: layer4.1.conv_bn_relu_1, torch.Size([512, 512, 3, 3])
    QuantLayer: layer4.1.conv_bn_2, torch.Size([512, 512, 3, 3])
    QuantLayer: fc, torch.Size([1000, 512])
Total QuantModule: 21, Folded BN layers : 0
conv1........ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 64, 112, 112])
conv_bn_relu_1................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 64, 56, 56])
conv_bn_2........................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 64, 56, 56])
conv_bn_relu_1................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 64, 56, 56])
conv_bn_2........................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 64, 56, 56])
conv_bn_relu_1................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 128, 28, 28])
conv_bn_2........................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 128, 28, 28])
conv_bn_down................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 128, 28, 28])
conv_bn_relu_1........................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 128, 28, 28])
conv_bn_2................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 128, 28, 28])
conv_bn_relu_1........................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 256, 14, 14])
conv_bn_2................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 256, 14, 14])
conv_bn_down........................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 256, 14, 14])
conv_bn_relu_1................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 256, 14, 14])
conv_bn_2........................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 256, 14, 14])
conv_bn_relu_1................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 512, 7, 7])
conv_bn_2........................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 512, 7, 7])
conv_bn_down................................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 512, 7, 7])
conv_bn_relu_1........................................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 512, 7, 7])
conv_bn_2................................................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 512, 7, 7])
fc........................................................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 1000])
0........................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 64, 56, 56])
1........................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 64, 56, 56])
0................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 128, 28, 28])
1................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 128, 28, 28])
0........................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 256, 14, 14])
1........................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 256, 14, 14])
0................................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 512, 7, 7])
1................................................................................................................................................................ <- Dots indicate the Original FP inference.
   FP_OUTPUTS shape torch.Size([1024, 512, 7, 7])

[1/21] AdaRound computing: conv1
 <- Commas indicate the INT inference.
    1D search with UINT8
Activation quantizer initialized from QuantLayer
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0
)
Iter     1 | Total loss: 0.0029 (MSE:0.0029, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0007 (MSE:0.0007, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0006 (MSE:0.0006, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0011 (MSE:0.0011, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 1169.2815 (MSE:0.0007, Reg:1169.2808) beta=20.00
Iter  5000 | Total loss: 57.0005 (MSE:0.0005, Reg:57.0000) beta=18.88
Iter  6000 | Total loss: 43.0012 (MSE:0.0012, Reg:43.0000) beta=17.75
Iter  7000 | Total loss: 24.0014 (MSE:0.0014, Reg:24.0000) beta=16.62
Iter  8000 | Total loss: 21.0007 (MSE:0.0007, Reg:21.0000) beta=15.50
Iter  9000 | Total loss: 13.0007 (MSE:0.0007, Reg:13.0000) beta=14.38
Iter 10000 | Total loss: 5.0007 (MSE:0.0007, Reg:5.0000) beta=13.25
Iter 11000 | Total loss: 3.0009 (MSE:0.0009, Reg:3.0000) beta=12.12
Iter 12000 | Total loss: 3.0007 (MSE:0.0007, Reg:3.0000) beta=11.00
Iter 13000 | Total loss: 3.0011 (MSE:0.0011, Reg:3.0000) beta=9.88
Iter 14000 | Total loss: 2.9957 (MSE:0.0007, Reg:2.9950) beta=8.75
Iter 15000 | Total loss: 0.0005 (MSE:0.0005, Reg:0.0000) beta=7.62
Iter 16000 | Total loss: 0.0023 (MSE:0.0023, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.0011 (MSE:0.0011, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0008 (MSE:0.0008, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0004 (MSE:0.0004, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0007 (MSE:0.0007, Reg:0.0000) beta=2.00

[2/21] BRECQ computing: 0
,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.0040 (MSE:0.0040, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0018 (MSE:0.0018, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0015 (MSE:0.0015, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0017 (MSE:0.0017, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 10746.9082 (MSE:0.0025, Reg:10746.9053) beta=20.00
Iter  5000 | Total loss: 1130.5898 (MSE:0.0019, Reg:1130.5879) beta=18.88
Iter  6000 | Total loss: 594.9968 (MSE:0.0026, Reg:594.9941) beta=17.75
Iter  7000 | Total loss: 371.7888 (MSE:0.0022, Reg:371.7867) beta=16.62
Iter  8000 | Total loss: 234.9781 (MSE:0.0019, Reg:234.9761) beta=15.50
Iter  9000 | Total loss: 151.8532 (MSE:0.0016, Reg:151.8516) beta=14.38
Iter 10000 | Total loss: 112.0017 (MSE:0.0018, Reg:112.0000) beta=13.25
Iter 11000 | Total loss: 60.0012 (MSE:0.0015, Reg:59.9996) beta=12.12
Iter 12000 | Total loss: 30.0019 (MSE:0.0019, Reg:30.0000) beta=11.00
Iter 13000 | Total loss: 12.0017 (MSE:0.0017, Reg:12.0000) beta=9.88
Iter 14000 | Total loss: 4.0024 (MSE:0.0024, Reg:4.0000) beta=8.75
Iter 15000 | Total loss: 0.0016 (MSE:0.0016, Reg:0.0000) beta=7.62
Iter 16000 | Total loss: 0.0030 (MSE:0.0030, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.0018 (MSE:0.0018, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0019 (MSE:0.0019, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0018 (MSE:0.0018, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0015 (MSE:0.0015, Reg:0.0000) beta=2.00

[3/21] BRECQ computing: 1
,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.0071 (MSE:0.0071, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0031 (MSE:0.0031, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0031 (MSE:0.0031, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0035 (MSE:0.0035, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 18715.6211 (MSE:0.0029, Reg:18715.6191) beta=20.00
Iter  5000 | Total loss: 2054.1841 (MSE:0.0035, Reg:2054.1807) beta=18.88
Iter  6000 | Total loss: 1248.9418 (MSE:0.0039, Reg:1248.9379) beta=17.75
Iter  7000 | Total loss: 814.7169 (MSE:0.0042, Reg:814.7126) beta=16.62
Iter  8000 | Total loss: 576.8085 (MSE:0.0034, Reg:576.8051) beta=15.50
Iter  9000 | Total loss: 386.9574 (MSE:0.0037, Reg:386.9537) beta=14.38
Iter 10000 | Total loss: 259.0036 (MSE:0.0036, Reg:259.0000) beta=13.25
Iter 11000 | Total loss: 157.3752 (MSE:0.0034, Reg:157.3717) beta=12.12
Iter 12000 | Total loss: 82.0026 (MSE:0.0034, Reg:81.9992) beta=11.00
Iter 13000 | Total loss: 33.6125 (MSE:0.0039, Reg:33.6087) beta=9.88
Iter 14000 | Total loss: 10.0038 (MSE:0.0038, Reg:10.0000) beta=8.75
Iter 15000 | Total loss: 1.0038 (MSE:0.0038, Reg:1.0000) beta=7.62
Iter 16000 | Total loss: 0.0038 (MSE:0.0038, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.0036 (MSE:0.0036, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0036 (MSE:0.0036, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0037 (MSE:0.0037, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0040 (MSE:0.0040, Reg:0.0000) beta=2.00

[4/21] BRECQ computing: 0
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.0028 (MSE:0.0028, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0014 (MSE:0.0014, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0015 (MSE:0.0015, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0013 (MSE:0.0013, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 73861.7656 (MSE:0.0015, Reg:73861.7656) beta=20.00
Iter  5000 | Total loss: 6377.4766 (MSE:0.0017, Reg:6377.4746) beta=18.88
Iter  6000 | Total loss: 4300.0283 (MSE:0.0015, Reg:4300.0269) beta=17.75
Iter  7000 | Total loss: 3272.3474 (MSE:0.0017, Reg:3272.3457) beta=16.62
Iter  8000 | Total loss: 2472.5530 (MSE:0.0019, Reg:2472.5510) beta=15.50
Iter  9000 | Total loss: 1823.8286 (MSE:0.0016, Reg:1823.8270) beta=14.38
Iter 10000 | Total loss: 1248.4021 (MSE:0.0019, Reg:1248.4001) beta=13.25
Iter 11000 | Total loss: 799.9465 (MSE:0.0019, Reg:799.9446) beta=12.12
Iter 12000 | Total loss: 422.0925 (MSE:0.0021, Reg:422.0904) beta=11.00
Iter 13000 | Total loss: 203.2172 (MSE:0.0018, Reg:203.2154) beta=9.88
Iter 14000 | Total loss: 74.4568 (MSE:0.0018, Reg:74.4550) beta=8.75
Iter 15000 | Total loss: 10.0021 (MSE:0.0021, Reg:10.0000) beta=7.62
Iter 16000 | Total loss: 0.0020 (MSE:0.0020, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.0017 (MSE:0.0017, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0018 (MSE:0.0018, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0019 (MSE:0.0019, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0017 (MSE:0.0017, Reg:0.0000) beta=2.00

[5/21] BRECQ computing: 1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.0030 (MSE:0.0030, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0020 (MSE:0.0020, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0021 (MSE:0.0021, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0022 (MSE:0.0022, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 86612.6406 (MSE:0.0019, Reg:86612.6406) beta=20.00
Iter  5000 | Total loss: 10131.0889 (MSE:0.0021, Reg:10131.0869) beta=18.88
Iter  6000 | Total loss: 6912.8335 (MSE:0.0023, Reg:6912.8311) beta=17.75
Iter  7000 | Total loss: 5093.8091 (MSE:0.0023, Reg:5093.8066) beta=16.62
Iter  8000 | Total loss: 3847.0437 (MSE:0.0022, Reg:3847.0415) beta=15.50
Iter  9000 | Total loss: 2825.9849 (MSE:0.0022, Reg:2825.9827) beta=14.38
Iter 10000 | Total loss: 1902.0002 (MSE:0.0023, Reg:1901.9979) beta=13.25
Iter 11000 | Total loss: 1143.8892 (MSE:0.0021, Reg:1143.8871) beta=12.12
Iter 12000 | Total loss: 618.8572 (MSE:0.0023, Reg:618.8549) beta=11.00
Iter 13000 | Total loss: 269.0797 (MSE:0.0024, Reg:269.0773) beta=9.88
Iter 14000 | Total loss: 80.7199 (MSE:0.0023, Reg:80.7176) beta=8.75
Iter 15000 | Total loss: 11.6917 (MSE:0.0025, Reg:11.6892) beta=7.62
Iter 16000 | Total loss: 1.0023 (MSE:0.0023, Reg:1.0000) beta=6.50
Iter 17000 | Total loss: 0.0022 (MSE:0.0022, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0024 (MSE:0.0024, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0024 (MSE:0.0024, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0022 (MSE:0.0022, Reg:0.0000) beta=2.00

[6/21] BRECQ computing: 0
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.0020 (MSE:0.0020, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0014 (MSE:0.0014, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0012 (MSE:0.0012, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0012 (MSE:0.0012, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 228327.7812 (MSE:0.0013, Reg:228327.7812) beta=20.00
Iter  5000 | Total loss: 17399.0762 (MSE:0.0018, Reg:17399.0742) beta=18.88
Iter  6000 | Total loss: 10750.3096 (MSE:0.0013, Reg:10750.3086) beta=17.75
Iter  7000 | Total loss: 7627.7910 (MSE:0.0013, Reg:7627.7896) beta=16.62
Iter  8000 | Total loss: 5657.8218 (MSE:0.0013, Reg:5657.8203) beta=15.50
Iter  9000 | Total loss: 4131.2441 (MSE:0.0013, Reg:4131.2427) beta=14.38
Iter 10000 | Total loss: 2821.8516 (MSE:0.0014, Reg:2821.8501) beta=13.25
Iter 11000 | Total loss: 1780.3770 (MSE:0.0015, Reg:1780.3755) beta=12.12
Iter 12000 | Total loss: 974.1891 (MSE:0.0016, Reg:974.1876) beta=11.00
Iter 13000 | Total loss: 447.1873 (MSE:0.0013, Reg:447.1859) beta=9.88
Iter 14000 | Total loss: 139.6097 (MSE:0.0015, Reg:139.6081) beta=8.75
Iter 15000 | Total loss: 12.0016 (MSE:0.0016, Reg:12.0000) beta=7.62
Iter 16000 | Total loss: 0.0013 (MSE:0.0013, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.0014 (MSE:0.0014, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0014 (MSE:0.0014, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0017 (MSE:0.0017, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0016 (MSE:0.0016, Reg:0.0000) beta=2.00

[7/21] BRECQ computing: 1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.0019 (MSE:0.0019, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0014 (MSE:0.0014, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0014 (MSE:0.0014, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0014 (MSE:0.0014, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 250372.4688 (MSE:0.0013, Reg:250372.4688) beta=20.00
Iter  5000 | Total loss: 16827.1230 (MSE:0.0013, Reg:16827.1211) beta=18.88
Iter  6000 | Total loss: 9398.0596 (MSE:0.0014, Reg:9398.0586) beta=17.75
Iter  7000 | Total loss: 6283.1157 (MSE:0.0013, Reg:6283.1143) beta=16.62
Iter  8000 | Total loss: 4495.5005 (MSE:0.0014, Reg:4495.4990) beta=15.50
Iter  9000 | Total loss: 3195.5991 (MSE:0.0015, Reg:3195.5977) beta=14.38
Iter 10000 | Total loss: 2264.4199 (MSE:0.0014, Reg:2264.4185) beta=13.25
Iter 11000 | Total loss: 1493.7170 (MSE:0.0014, Reg:1493.7156) beta=12.12
Iter 12000 | Total loss: 870.4428 (MSE:0.0014, Reg:870.4415) beta=11.00
Iter 13000 | Total loss: 412.3990 (MSE:0.0013, Reg:412.3977) beta=9.88
Iter 14000 | Total loss: 144.4988 (MSE:0.0014, Reg:144.4974) beta=8.75
Iter 15000 | Total loss: 23.0013 (MSE:0.0013, Reg:23.0000) beta=7.62
Iter 16000 | Total loss: 1.8690 (MSE:0.0014, Reg:1.8676) beta=6.50
Iter 17000 | Total loss: 0.0013 (MSE:0.0013, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0013 (MSE:0.0013, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0016 (MSE:0.0016, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0015 (MSE:0.0015, Reg:0.0000) beta=2.00

[8/21] BRECQ computing: 0
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.0028 (MSE:0.0028, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0021 (MSE:0.0021, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0017 (MSE:0.0017, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0020 (MSE:0.0020, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 642279.2500 (MSE:0.0019, Reg:642279.2500) beta=20.00
Iter  5000 | Total loss: 38215.1133 (MSE:0.0019, Reg:38215.1133) beta=18.88
Iter  6000 | Total loss: 18963.9688 (MSE:0.0018, Reg:18963.9668) beta=17.75
Iter  7000 | Total loss: 11932.5205 (MSE:0.0019, Reg:11932.5186) beta=16.62
Iter  8000 | Total loss: 8208.8984 (MSE:0.0019, Reg:8208.8965) beta=15.50
Iter  9000 | Total loss: 5714.0469 (MSE:0.0024, Reg:5714.0444) beta=14.38
Iter 10000 | Total loss: 3869.0957 (MSE:0.0019, Reg:3869.0938) beta=13.25
Iter 11000 | Total loss: 2447.5933 (MSE:0.0018, Reg:2447.5913) beta=12.12
Iter 12000 | Total loss: 1281.3253 (MSE:0.0018, Reg:1281.3235) beta=11.00
Iter 13000 | Total loss: 531.7216 (MSE:0.0018, Reg:531.7198) beta=9.88
Iter 14000 | Total loss: 140.2431 (MSE:0.0022, Reg:140.2409) beta=8.75
Iter 15000 | Total loss: 11.2695 (MSE:0.0019, Reg:11.2676) beta=7.62
Iter 16000 | Total loss: 0.0018 (MSE:0.0018, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.0020 (MSE:0.0020, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0021 (MSE:0.0021, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0024 (MSE:0.0024, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0019 (MSE:0.0019, Reg:0.0000) beta=2.00

[9/21] BRECQ computing: 1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Iter     1 | Total loss: 0.2229 (MSE:0.2229, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.1665 (MSE:0.1665, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.1835 (MSE:0.1835, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.1630 (MSE:0.1630, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 545992.4375 (MSE:0.1570, Reg:545992.2500) beta=20.00
Iter  5000 | Total loss: 93511.5781 (MSE:0.1813, Reg:93511.3984) beta=18.88
Iter  6000 | Total loss: 58639.4570 (MSE:0.1717, Reg:58639.2852) beta=17.75
Iter  7000 | Total loss: 36607.4258 (MSE:0.1677, Reg:36607.2578) beta=16.62
Iter  8000 | Total loss: 22015.8672 (MSE:0.1520, Reg:22015.7148) beta=15.50
Iter  9000 | Total loss: 12270.0088 (MSE:0.1496, Reg:12269.8594) beta=14.38
Iter 10000 | Total loss: 6020.6387 (MSE:0.1658, Reg:6020.4727) beta=13.25
Iter 11000 | Total loss: 2310.2883 (MSE:0.1653, Reg:2310.1230) beta=12.12
Iter 12000 | Total loss: 643.7092 (MSE:0.1622, Reg:643.5470) beta=11.00
Iter 13000 | Total loss: 99.1215 (MSE:0.1700, Reg:98.9515) beta=9.88
Iter 14000 | Total loss: 3.1522 (MSE:0.1522, Reg:3.0000) beta=8.75
Iter 15000 | Total loss: 0.1463 (MSE:0.1463, Reg:0.0000) beta=7.62
Iter 16000 | Total loss: 0.1433 (MSE:0.1433, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.1640 (MSE:0.1640, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.1623 (MSE:0.1623, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.1676 (MSE:0.1676, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.1537 (MSE:0.1537, Reg:0.0000) beta=2.00

[10/21] AdaRound computing: fc
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, <- Commas indicate the INT inference.
    2D search with INT8
Activation quantizer initialized from QuantLayer
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    weight_decay: 0
) 20000
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0
)
Iter     1 | Total loss: 0.1929 (MSE:0.1929, Reg:0.0000) beta=0.00
Iter  1000 | Total loss: 0.0643 (MSE:0.0643, Reg:0.0000) beta=0.00
Iter  2000 | Total loss: 0.0637 (MSE:0.0637, Reg:0.0000) beta=0.00
Iter  3000 | Total loss: 0.0681 (MSE:0.0681, Reg:0.0000) beta=0.00
Iter  4000 | Total loss: 41755.8203 (MSE:0.0632, Reg:41755.7578) beta=20.00
Iter  5000 | Total loss: 7540.6064 (MSE:0.0657, Reg:7540.5405) beta=18.88
Iter  6000 | Total loss: 5591.0835 (MSE:0.0673, Reg:5591.0161) beta=17.75
Iter  7000 | Total loss: 4256.1284 (MSE:0.0615, Reg:4256.0669) beta=16.62
Iter  8000 | Total loss: 3131.2249 (MSE:0.0675, Reg:3131.1575) beta=15.50
Iter  9000 | Total loss: 2073.8867 (MSE:0.0699, Reg:2073.8167) beta=14.38
Iter 10000 | Total loss: 1143.8030 (MSE:0.0675, Reg:1143.7355) beta=13.25
Iter 11000 | Total loss: 545.5921 (MSE:0.0637, Reg:545.5284) beta=12.12
Iter 12000 | Total loss: 203.7648 (MSE:0.0693, Reg:203.6954) beta=11.00
Iter 13000 | Total loss: 50.6929 (MSE:0.0685, Reg:50.6244) beta=9.88
Iter 14000 | Total loss: 16.0645 (MSE:0.0647, Reg:15.9998) beta=8.75
Iter 15000 | Total loss: 0.0693 (MSE:0.0693, Reg:0.0000) beta=7.62
Iter 16000 | Total loss: 0.0652 (MSE:0.0652, Reg:0.0000) beta=6.50
Iter 17000 | Total loss: 0.0646 (MSE:0.0646, Reg:0.0000) beta=5.38
Iter 18000 | Total loss: 0.0606 (MSE:0.0606, Reg:0.0000) beta=4.25
Iter 19000 | Total loss: 0.0656 (MSE:0.0656, Reg:0.0000) beta=3.12
Iter 20000 | Total loss: 0.0675 (MSE:0.0675, Reg:0.0000) beta=2.00
BRECQ values computing done!

    Quantized model Evaluation accuracy on 50000 images, 69.116%
Total time: 995.16 sec
